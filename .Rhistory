pvals.prior.diff[t,] <- apply(X, 2, function(u) my.speed.glm(u,ctilde))
cCors[t] <- cor(c1, ctilde)
}
j=1
rejections <- pvals.prior.diff[,j] < 0.05
mod <- glm(rejections ~ cCors, family="binomial")
mod
predict(mod, newdata("cCors"=1)
)
predict(mod, newdata=data.frame("cCors"=1))
rejections
?predict.glm
predict(mod, newdata=data.frame("cCors"=1), type="respose")
predict(mod, newdata=data.frame("cCors"=1), type="response")
rejections <- pvals.prior.diff[,j] < 0.05
mod <- glm(rejections ~ cCors, family="binomial")
pi0s.cor[j] <- 1-predict(mod, newdata=data.frame("cCors"=1), type="response")
pi0s.cor <- rep(NA, 100)
for (j in 1:100) {
rejections <- pvals.prior.diff[,j] < 0.05
mod <- glm(rejections ~ cCors, family="binomial")
pi0s.cor[j] <- 1-predict(mod, newdata=data.frame("cCors"=1), type="response")
}
head(pi0s.cor,40)
plot(pi0s.cor)
plot(pi0s.ignore)
plot(pi0s.cor)
plot(pi0s.ignore)
length(pi0s.small)
length(pi0s.idealPrior)
pvals.full <- pvals
pvals <- pvals[,1:100]
pvals.weight.big <- apply(pvals,2,function(u) u*pi0s.big)
pvals.weight.small <- apply(pvals,2,function(u) u*pi0s.small)
pvals.weight.ideal <- apply(pvals,1,function(u) u*pi0s.idealPrior)
pvals.weight.ignore <- apply(pvals,1,function(u) u*pi0s.ignore)
pvals.weight.cor <- apply(pvals,1,function(u) u*pi0s.cor)
dim(pvals.weight.big)
dim(pvals)
pvals.weight.ideal <- t(apply(pvals,1,function(u) u*pi0s.idealPrior))
dim(pvals.weight.ideal;)
dim(pvals.weight.ideal)
pvals.weight.ideal <- t(apply(pvals,1,function(u) u*pi0s.idealPrior))
pvals.weight.ignore <- t(apply(pvals,1,function(u) u*pi0s.ignore))
pvals.weight.cor <- t(apply(pvals,1,function(u) u*pi0s.cor))
pvals.weight.cor
dim(pvals.weight.cor)
qvals.big <- apply(pvals.weight.big, 1, function(u) p.adjust(u, method="BH"))
qvals.small <- apply(pvals.weight.small, 1, function(u) p.adjust(u, method="BH"))
qvals.ideal <- apply(pvals.weight.ideal, 1, function(u) p.adjust(u, method="BH"))
qvals.ignore <- apply(pvals.weight.ignore, 1, function(u) p.adjust(u, method="BH"))
qvals.cor <- apply(pvals.weight.cor, 1, function(u) p.adjust(u, method="BH"))
qvals.big <- myQ(pvals.weight.big)
myQ <- function(weightedPMat) {
return(apply(weightedPMat,1,function(u) p.adjust(u, method="BH")))
}
qvals.big <- myQ(pvals.weight.big)
qvals.small <- myQ(pvals.weight.small)
qvals.ideal <- myQ(pvals.weight.ideal)
qvals.ignore <- myQ(pvals.weight.ignore)
qvals.cor <- myQ(pvals.weight.cor)
sum(q[1:20] < 0.05)
q <- pvals.big[1]
q <- qvals.big[1,]
trueDisc <- sum(q[1:20] < 0.05)
trueDisc
falseDisc <- sum(q[21:length(q)] < 0.05)
myQ <- function(weightedPMat) {
return(apply(weightedPMat,1,function(u) p.adjust(u, method="BH")))
}
myFDR <- function(q) {
trueDisc <- sum(q[1:20] < 0.05)
falseDisc <- sum(q[21:length(q)] < 0.05)
return(falseDisc/(trueDisc+falseDisc))
}
FDRs.big <- apply(qvals.big,1,myFDR)
mean(FDRs.big)
FDRs.big <- apply(qvals.big,1,myFDR)
FDRs.big
dim(qvals.big)
myQ <- function(weightedPMat) {
return(t(apply(weightedPMat,1,function(u) p.adjust(u, method="BH"))))
}
qvals.big <- myQ(pvals.weight.big)
qvals.small <- myQ(pvals.weight.small)
qvals.ideal <- myQ(pvals.weight.ideal)
qvals.ignore <- myQ(pvals.weight.ignore)
qvals.cor <- myQ(pvals.weight.cor)
FDRs.big <- apply(qvals.big,1,myFDR)
FDRs.big
mean(FDRs.big)
FDRs.small <- apply(qvals.small,1,myFDR)
mean(FDRs.small)
FDRs.ideal <- apply(qvals.idea,1,myFDR)
FDRs.ideal <- apply(qvals.ideal,1,myFDR)
mean(FDRs.ideal)
FDRs.ignore <- apply(qvals.ignore,1,myFDR)
mean(FDRs.ignore)
myPower <- function(q) {
trueDisc <-  sum(q[1:20] < 0.05)
return(trueDisc/20)
}
print(apply(pvals.big,1,myPower))
print(apply(qvals.big,1,myPower))
print(apply(qvals.small,1,myPower))
print(apply(qvals.ideal,1,myPower))
print(apply(qvals.ignore,1,myPower))
print(apply(qvals.cor,1,myPower))
print(mean(apply(qvals.big,1,myPower)))
print(mean(apply(qvals.small,1,myPower)))
print(mean(apply(qvals.ideal,1,myPower)))
print(mean(apply(qvals.ignore,1,myPower)))
print(mean(apply(qvals.cor,1,myPower)))
pi0s.big
pi0s.small
FDRs.big <- apply(qvals.big,1,myFDR)
mean(FDRs.big)
FDRs.small <- apply(qvals.small,1,myFDR)
mean(FDRs.small)
FDRs.ideal <- apply(qvals.ideal,1,myFDR)
mean(FDRs.ideal)
FDRs.ignore <- apply(qvals.ignore,1,myFDR)
mean(FDRs.ignore)
FDRs.ideal <- apply(qvals.ideal,1,myFDR)
mean(FDRs.ideal)
set.seed(5)
nTrials <- 500
n <- 300
p <- 1000
c1 <- sample(1:2, size=n, replace=TRUE)
c2 <- sample(1:2, size=n, replace=TRUE)
pvals <- matrix(NA, nrow=nTrials, ncol=p)
for (t in 1:nTrials) {
print(t)
set.seed(t)
X <- genData.twoConds(c1, c2, n, p, beta1=0.5, beta2=0.5)
pvals[t,] <- apply(X, 2, function(u) my.speed.glm(u,c1))
}
nPrior <- 50
p <- 100
### Let's do small only from now on? No more 1000 genes?
pvals.prior.ideal <- matrix(NA, ncol=p, nrow=nPrior)
for (t in 1:nPrior) {
set.seed(t)
c1.t <- sample(1:2, size=n, replace=TRUE)
c2.t <- sample(1:2, size=n, replace=TRUE)
X <- genData.twoConds(c1.t, c2.t, n, p, beta1=0.5, beta2=0.5)
pvals.prior.ideal[t,] <- apply(X, 2, function(u) my.speed.glm(u,c1.t))
}
nPrior <- 100
### Let's do small only from now on? No more 1000 genes?
pvals.prior.diff <- matrix(NA, ncol=p, nrow=nPrior)
cCors <- rep(NA, nPrior)
for (t in 1:nPrior) {
set.seed(t)
X <- genData.twoConds(c1,c2, n, p, beta1=0.5, beta2=0.5)
pick <- sample(c("c1", "c2", "rando"), size=1, replace=F)
if (pick=="c1") {
ctilde <- sapply(c1, function(u)  sample(c(u, 1-u), size=1, prob=c(0.7, 1-0.7)))
} else {
if (pick=="c2") {
ctilde <- sapply(c2, function(u)  sample(c(u, 1-u), size=1, prob=c(0.7, 1-0.7)))
} else {
ctilde <- sample(c(1,2), replace=TRUE, size=n)
}
}
pvals.prior.diff[t,] <- apply(X, 2, function(u) my.speed.glm(u,ctilde))
cCors[t] <- cor(c1, ctilde)
}
my.pi0 <- function(p,lambda) {
pi0 <- mean(p >= lambda)/(1 - lambda)
if (pi0 == 0) {
return (lambda^(length(p)))
}
return(min(pi0,1))
}
980/1000
pi0s.big <- apply(pvals, 1, function(u) my.pi0(u, 0.1))
80/100
pi0s.small <- apply(pvals[,1:100],1, function(u) my.pi0(u, 0.1))
pi0s.idealPrior <- apply(pvals.prior.ideal, 2, function(u) my.pi0(u, 0.1))
pi0s.ignore <- apply(pvals.prior.diff, 2, function(u)  my.pi0(u, 0.1))
pi0s.cor <- rep(NA, 100)
for (j in 1:100) {
rejections <- pvals.prior.diff[,j] < 0.05
mod <- glm(rejections ~ cCors, family="binomial")
pi0s.cor[j] <- 1-predict(mod, newdata=data.frame("cCors"=1), type="response")
}
plot(pi0s.cor)
plot(pi0s.ignore)
pvals.full <- pvals
pvals <- pvals[,1:100]
myQ <- function(weightedPMat) {
return(t(apply(weightedPMat,1,function(u) p.adjust(u, method="BH"))))
}
myFDR <- function(q) {
trueDisc <- sum(q[1:20] < 0.05)
falseDisc <- sum(q[21:length(q)] < 0.05)
return(falseDisc/(trueDisc+falseDisc))
}
myPower <- function(q) {
trueDisc <-  sum(q[1:20] < 0.05)
return(trueDisc/20)
}
pvals.weight.big <- apply(pvals,2,function(u) u*pi0s.big)
pvals.weight.small <- apply(pvals,2,function(u) u*pi0s.small)
pvals.weight.ideal <- t(apply(pvals,1,function(u) u*pi0s.idealPrior))
pvals.weight.ignore <- t(apply(pvals,1,function(u) u*pi0s.ignore))
pvals.weight.cor <- t(apply(pvals,1,function(u) u*pi0s.cor))
qvals.big <- myQ(pvals.weight.big)
qvals.small <- myQ(pvals.weight.small)
qvals.ideal <- myQ(pvals.weight.ideal)
qvals.ignore <- myQ(pvals.weight.ignore)
qvals.cor <- myQ(pvals.weight.cor)
FDRs.big <- apply(qvals.big,1,myFDR)
mean(FDRs.big)
FDRs.small <- apply(qvals.small,1,myFDR)
mean(FDRs.small)
FDRs.ideal <- apply(qvals.ideal,1,myFDR)
mean(FDRs.ideal)
FDRs.ignore <- apply(qvals.ignore,1,myFDR)
mean(FDRs.ignore)
FDRs.ideal <- apply(qvals.ideal,1,myFDR)
mean(FDRs.ideal)
print(mean(apply(qvals.big,1,myPower)))
print(mean(apply(qvals.small,1,myPower)))
print(mean(apply(qvals.ideal,1,myPower)))
print(mean(apply(qvals.ignore,1,myPower)))
print(mean(apply(qvals.cor,1,myPower)))
library(datathin)
remotes::install_github("anna-neufeld.github.io/datathin")
remotes::install_github("anna-neufeld/datathin")
setwd("~/datathin")
devtools::check()
devtools::check()
devtools::load_all()
set.seed(1)
n <- 150
p <- 2
X<- matrix(rnorm(n*p, mean=0, sd=1), ncol=p)
ggplot(data=NULL, aes(x=X[,1], y=X[,2]))+geom_point()+coord_fixed()+ggtitle("All data")
library(tidyverse)
library(patchwork)
set.seed(1)
n <- 150
p <- 2
X<- matrix(rnorm(n*p, mean=0, sd=1), ncol=p)
ggplot(data=NULL, aes(x=X[,1], y=X[,2]))+geom_point()+coord_fixed()+ggtitle("All data")
cluster.mse.naive <- function(dat, clusterlabs) {
totSS <- 0
for (lab in unique(clusterlabs)) {
clustdat <- dat[clusterlabs==lab,, drop='F']
meanvec <- colMeans(dat[clusterlabs==lab,, drop='F'])
ss <- apply(clustdat, 1, function(u) sum((u-meanvec)^2))
totSS <- totSS+sum(ss)
}
return(totSS/length(dat))
}
one.cluster <- as.factor(rep(1,n))
three.clusters <- as.factor(kmeans(X, centers=3)$cluster)
mse.1 <- cluster.mse.naive(X, one.cluster)
mse.3 <- cluster.mse.naive(X, three.clusters)
p1 <- ggplot(data=NULL, aes(x=X[,1], y=X[,2], col=one.cluster))+geom_point()+
coord_fixed()+ggtitle("All data, 1 cluster", round(mse.1,3))
p3 <- ggplot(data=NULL, aes(x=X[,1], y=X[,2], col=three.clusters))+geom_point()+coord_fixed()+ggtitle("All data, 3 clusters", round(mse.3,3))
p1+p3
clusters.full <- sapply(1:10, function(u) kmeans(X, centers= u)$cluster)
results.naive <-  apply(clusters.full, 2, function(u) cluster.mse.naive(X, u))
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.naive, col="Naive method"), lwd=1.5)+
theme(axis.text = element_text(size=16), axis.title = element_text(size=18))+
scale_x_continuous(breaks=seq(0,10,by=2))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")+labs(col="")
X.thin <- datathin(X, family="normal", epsilon=0.5, arg=1)
Xtrain <- X.thin$Xtr
Xtest <- X.thin$Xte
p1 <- ggplot(data=NULL, aes(x=X[,1], y=X[,2]))+geom_point()+
xlim(c(-3,3))+ylim(c(-3,3))+
coord_fixed()+ggtitle("All data")
p2 <- ggplot(data=NULL, aes(x=Xtrain[,1], y=Xtrain[,2]))+geom_point()+
xlim(c(-3,3))+ylim(c(-3,3))+
coord_fixed()+ggtitle("Training set")
p3 <- ggplot(data=NULL, aes(x=Xtest[,1], y=Xtest[,2]))+geom_point()+
xlim(c(-3,3))+ylim(c(-3,3))+
coord_fixed()+ggtitle("Test set")
p1+p2+p3
cluster.train <- as.factor(kmeans(Xtrain, centers=3)$cluster)
p2 <- ggplot(data=NULL, aes(x=Xtrain[,1], y=Xtrain[,2], col=cluster.train))+geom_point()+
xlim(c(-3,3))+ylim(c(-3,3))+
coord_fixed()+ggtitle("Training set")
p3 <- ggplot(data=NULL, aes(x=Xtest[,1], y=Xtest[,2], col=cluster.train))+geom_point()+
xlim(c(-3,3))+ylim(c(-3,3))+
coord_fixed()+ggtitle("Test set")
p2+p3+plot_layout(guides="collect")
cluster.mse.datathin <- function(dat.train, dat.test, clusterlabs) {
totSS <- 0
for (lab in unique(clusterlabs)) {
clustdat.test <- dat.test[clusterlabs==lab,, drop='F']
meanvec <- colMeans(dat.train[clusterlabs==lab,, drop='F'])
ss <- apply(clustdat.test, 1, function(u) sum((u-meanvec)^2))
totSS <- totSS+sum(ss)
}
return(totSS/length(dat.test))
}
clusters.full <- sapply(1:10, function(u) kmeans(X, centers= u)$cluster)
results.naive <-  apply(clusters.full, 2, function(u) cluster.mse.naive(X, u))
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
results.datathin <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u))
eps = 0.5
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.naive, col="Naive method"), lwd=1.5)+
geom_line(aes(x=1:10, y=results.datathin/eps, col="Data thinning"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")+labs(col="")
p <- 2
n <- 150
trueClusters <- as.factor(rep(c(1,2,3), each=n/3))
X <- rbind(
matrix(rnorm(n/3*p, -4,1), ncol=p),
matrix(rnorm(n/3*p, 0,1), ncol=p),
matrix(rnorm(n/3*p, 4,1), ncol=p)
)
ggplot(data=NULL, aes(x=X[,1], y=X[,2], col=trueClusters))+geom_point()
X.thin <- datathin(X, family="normal", epsilon=0.5, arg=1)
Xtrain <- X.thin$Xtr
Xtest <- X.thin$Xte
p1 <- ggplot(data=NULL, aes(x=X[,1], y=X[,2], col=trueClusters))+geom_point()+
xlim(c(-6,6))+ylim(c(-6,6))+
coord_fixed()+ggtitle("All data")
p2 <- ggplot(data=NULL, aes(x=Xtrain[,1], y=Xtrain[,2], col=trueClusters))+geom_point()+
xlim(c(-6,6))+ylim(c(-6,6))+
coord_fixed()+ggtitle("Training set")
p3 <- ggplot(data=NULL, aes(x=Xtest[,1], y=Xtest[,2], col=trueClusters))+geom_point()+
xlim(c(-6,6))+ylim(c(-6,6))+
coord_fixed()+ggtitle("Test set")
p1+p2+p3+plot_layout(guides="collect")
clusters.full <- sapply(1:10, function(u) kmeans(X, centers= u)$cluster)
results.naive <-  apply(clusters.full, 2, function(u) cluster.mse.naive(X, u))
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
results.datathin <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u))
eps = 0.5
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.naive, col="Naive method"), lwd=1.5)+
geom_line(aes(x=1:10, y=results.datathin/eps, col="Data thinning"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
cluster.mse.datathin <- function(dat.train, dat.test, clusterlabs, eps=0.5) {
totSS <- 0
for (lab in unique(clusterlabs)) {
clustdat.test <- dat.test[clusterlabs==lab,, drop='F']
meanvec <- (1-eps)/(eps)*colMeans(dat.train[clusterlabs==lab,, drop='F'])
ss <- apply(clustdat.test, 1, function(u) sum((u-meanvec)^2))
totSS <- totSS+sum(ss)
}
return(totSS/length(dat.test))
}
X.thin <- datathin(X, family="normal", epsilon=0.9, arg=1)
Xtrain <- X.thin$Xtr
Xtest <- X.thin$Xte
p1 <- ggplot(data=NULL, aes(x=X[,1], y=X[,2], col=trueClusters))+geom_point()+
xlim(c(-6,6))+ylim(c(-6,6))+
coord_fixed()+ggtitle("All data")
p2 <- ggplot(data=NULL, aes(x=Xtrain[,1], y=Xtrain[,2], col=trueClusters))+geom_point()+
xlim(c(-6,6))+ylim(c(-6,6))+
coord_fixed()+ggtitle("Training set")
p3 <- ggplot(data=NULL, aes(x=Xtest[,1], y=Xtest[,2], col=trueClusters))+geom_point()+
xlim(c(-4,4))+ylim(c(-4,4))+
coord_fixed()+ggtitle("Test set")
p1+p2+p3+plot_layout(guides="collect")
eps=0.9
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
results.datathin <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, eps))
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
nFolds <- 10
X.multithin <- multithin(X, family="normal", nfolds=nFolds, arg=1)
totalMSEs <- matrix(NA, nrow=nFolds, ncol=10)
for (fold in 1:nFolds) {
Xtest <- X.multithin[[fold]]
Xtrain <- X-Xtest
clusters.train <- sapply(1:10, function(u) kmeans(Xtrain, centers= u)$cluster)
totalMSEs[fold,] <- apply( clusters.train, 2, function(u) cluster.mse.datathin(Xtrain,Xtest, u, (nFolds-1)/nFolds))
}
averagedMSEs <- apply(totalMSEs, 2, mean)
ggplot(data = NULL)+
geom_line(aes(x=1:10, y=results.datathin, col="Data thinning, eps=0.9"), lwd=1.5)+
geom_line(aes(x=1:10, y=averagedMSEs, col="Multi thinning, 10 folds"), lwd=1.5)+
scale_x_continuous(breaks=seq(0,10,by=1))+
xlab("Number of Clusters") + ylab("Total within-cluster MSE")
setwd("~/countsplit.tutorials/vignettes")
pkgdown::build_site(lazy=T)
setwd("~/countsplit.tutorials/vignettes")
pkgdown::build_site(lazy=T)
setwd("~/countsplit.tutorials")
pkgdown::build_site(lazy=T)
pkgdown::build_site(lazy=T)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
library(Seurat)
library(countsplit)
library(ggplot2)
library(patchwork)
library(mclust)
library(countsplit.tutorials)
data(pbmc.counts, package="countsplit.tutorials")
rownames(pbmc.counts) <- sapply(rownames(pbmc.counts), function(u) stringr::str_replace_all(u, "_","-"))
