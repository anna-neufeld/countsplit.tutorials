xprob <- dnbinom(x,size=r, prob=p)
sum <- sum +  factorial(x)*factorial(x+r-k-2)/(factorial(x+r-1)*factorial(k))*xprob
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 1:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
max(myDensies)
factorial(x)/factorial(k)
x
k
product((x):(x+r-1))
prod((x):(x+r-1))
prody <- factorial(k)/prod((x):(x+r-1))
prody
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- factorial(k)/prod((x):(x+r-1))
sum <- sum + prody*factorial(x+r-k-2)*xprob
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 1:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=r,prob=p))
max(myDensies)
which(myDensies > )
which(myDensies > 1)
head(myDensies)
prody <- factorial(k)/prod((x):(x+r-1))
prody
factorial(x+r-k-2)
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- prod((x):(x+r-1))
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(k)
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 1:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=r,prob=p))
abline(0,1, col="red")
myDensies
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- 1/prod((x):(x+r-1))
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(k)
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 1:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=r,prob=p))
abline(0,1, col="red")
myDensies
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- 1/prod((x):(x+r-1))
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(k)
x <- x+1
}
return(sum)
}
k=5
r=4
p=0.4
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- 1/prod((x):(x+r-1))
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(k)
x <- x+1
}
x
sum
prody
factorial(x+r-k-2)/factorial(k)
factorial(x)*factorial(x+r-k-2)/(factorial(k)*factorial(x+r-1))
(factorial(x)*factorial(x+r-k-2))/(factorial(k)*factorial(x+r-1))
x_r-k-2
x+r-k-2
x_r-1
x+r-1
factorial(x)/factorial(k)
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- 1/prod((x):(x+r-1))
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(x-k)
x <- x+1
}
return(sum)
(factorial(x)*factorial(x+r-k-2))/(factorial(k)*factorial(x+r-1))
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 1:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=r,prob=p))
abline(0,1, col="red")
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 1:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- 1/prod((x):(x+r-1))
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(x-k)
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 1:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
sum(myDensies)
sum(dnbinom(Ks,size=1,prob=p))
Ks <- 1:50
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
sum(myDensies)
sum(dnbinom(Ks,size=1,prob=p))
sum(dnbinom(1:100,size=1,prob=p))
sum(dnbinom(1:200,size=1,prob=p))
range(rnbinom(10000,1,p))
Ks <- 0:50
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
sum(dnbinom(Ks,size=1,prob=p))
sum(myDensies)
head(myDensies)
k=0
sum=0
x =k
xprob=1
xprob <- dnbinom(x,size=r, prob=p)
xprob
prody <- 1/prod((x):(x+r-1))
prody
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
if (x==0) {
prody <- 1/prod((1):(x+r-1))
} else {
prody <- 1/prod((x):(x+r-1))
}
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(x-k)
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 0:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
if (x==0) {
prody <- 1/prod((1):(x+r-1))
} else {
prody <- 1/prod((x):(x+r-1))
}
sum <- sum + prody*factorial(x+r-k-2)*xprob/factorial(x-k+1)
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 0:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- (factorial(x)/factorial(k)*factorial(x+r-k-2))/factorial(x+r-1)
print(prody)
sum <- sum + prody*xprob
x <- x+1
}
return(sum)
}
myDens(k,r,p)
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- (factorial(x)/factorial(x-k)*factorial(x+r-k-2))/factorial(x+r-1)
print(prody)
sum <- sum + prody*xprob
x <- x+1
}
return(sum)
}
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- (factorial(x)/factorial(x-k)*factorial(x+r-k-2))/factorial(x+r-1)
print(prody)
sum <- sum + prody*xprob
x <- x+1
}
return(sum)
}
myDens(k,r,p)
p=0.3
r=4
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- (factorial(x)/factorial(x-k)*factorial(x+r-k-2))/factorial(x+r-1)
print(prody)
sum <- sum + prody*xprob
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 0:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
sum(myDensies)
sum(dnbinom(Ks,size=1,prob=p))
splitFunc <- function(X,b,b1=floor(b/2)) {
perm <- sample(c(rep(1,X), rep(0,b-1)))
indices <- which(perm==0)
splitPoint <- indices[b1]
return(sum(perm[1:splitPoint]))
}
X <- rnbinom(10000, size=4, prob=0.4)
Xtrain <- sapply(X, splitFunc, b=4, b1=1)
Xtest <- X-Xtrain
par(mfrow=c(3,1))
hist(X, breaks=0:max(X), freq=FALSE, right=FALSE)
points(0:max(X), dnbinom(0:max(X),size=4,prob=0.4), col="red", type='b')
hist(Xtrain, breaks=0:max(X), freq=FALSE, right=FALSE)
points(0:max(X), dnbinom(0:max(X),size=1,prob=0.4), col="red", type='b')
hist(Xtest, breaks=0:max(X), freq=FALSE, right=FALSE)
points(0:max(X), dnbinom(0:max(X),size=3,prob=0.4), col="red", type='b')
cor(Xtrain, Xtest)
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- (factorial(x)/factorial(x-k))*factorial(x+r-k-2)/factorial(x+r-1)
print(prody)
sum <- sum + prody*xprob
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 0:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
splitFunc <- function(X,b,b1=floor(b/2)) {
perm <- sample(c(rep(1,X), rep(0,b-1)))
indices <- which(perm==0)
splitPoint <- indices[b1]
return(sum(perm[1:splitPoint]))
}
X <- rnbinom(10000, size=4, prob=0.4)
Xtrain <- sapply(X, splitFunc, b=4, b1=1)
Xtest <- X-Xtrain
par(mfrow=c(3,1))
hist(X, breaks=0:max(X), freq=FALSE, right=FALSE)
points(0:max(X), dnbinom(0:max(X),size=4,prob=0.4), col="red", type='b')
hist(Xtrain, breaks=0:max(X), freq=FALSE, right=FALSE)
points(0:max(X), dnbinom(0:max(X),size=1,prob=0.4), col="red", type='b')
hist(Xtest, breaks=0:max(X), freq=FALSE, right=FALSE)
points(0:max(X), dnbinom(0:max(X),size=3,prob=0.4), col="red", type='b')
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- (factorial(x)/factorial(x-k))*factorial(x+r-k-2)/factorial(x+r-1)
print(prody)
sum <- sum + prody*xprob
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 0:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
range(myDensies)
sum(myDensies)
myDens <- function(k,r, p) {
sum <- 0
xprob <- 1
x <- k
while (xprob > 1e-6) {
xprob <- dnbinom(x,size=r, prob=p)
prody <- (factorial(x)/factorial(x-k))*(r-1)*factorial(x+r-k-2)/factorial(x+r-1)
print(prody)
sum <- sum + prody*xprob
x <- x+1
}
return(sum)
}
p=0.3
r=4
hist(rnbinom(1000,r,p))
Ks <- 0:30
myDensies <- sapply(Ks, myDens, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
myDens2 <- function(k,r,p) {
sum=0
for (x in k:1000) {
sum = sum+choo(x+r-k-2,r-2)*(1-p)^2*p^k
}
}
myDens2 <- function(k,r,p) {
sum=0
for (x in k:1000) {
sum = sum+choo(x+r-k-2,r-2)*(1-p)^2*p^k
}
}
myDensies2 <- sapply(Ks, myDens2, r=r, p=p)
plot(myDensies, dnbinom(Ks,size=1,prob=p))
abline(0,1, col="red")
setwd("~/countsplit")
devtools::build_site()
devtools::build_site(lazy=TRUE)
setwd("~/countsplit")
setwd("!")
setwd("~")
devtools::create_package("countsplit-tutorials")
create_package("countsplit-tutorials")
library(devtools)
library(roxygen2)
create_package("countsplit-tutorials")
create_package("countsplit.tutorials")
use_mit_license()
setwd("~/countsplit.tutorials")
use_mit_license()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site()
setwd("~/countsplit")
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site(lazy=TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
setwd("~/countsplit.tutorials")
devtools::check()
devtools::check()
imports(countsplit)
devtools::depends(countsplit)
setwd("~/countsplit")
devtools::check()
setwd("~/countsplit.tutorials")
devtools::check()
devtools::check()
library(tidyverse)
library(patchwork)
library(data.table)
setwd("~/Dropbox/nbCS_paper/sims/New_figures_for_paper/res")
file_names_genewise <- dir("~/Dropbox/nbCS_paper/sims/New_figures_for_paper/res", pattern="jan18_diffExpEps*")
res_genewise <- do.call(rbind,lapply(file_names_genewise , read.csv ,sep="", header=FALSE))
names(res_genewise) <- c("j", "pval", "coeff", "b.est.glm",
"rand", "method", "n", "p" , "B1", "K","overdisp", "eps")
res_genewise$eps2 <- paste("U+03B5", res_genewise$eps)
res_genewise$overdisp2 <- "Mild overdispersion"
res_genewise$overdisp2[res_genewise$overdisp==5] <- "Severe overdispersion"
table(res_genewise$B1)
table(res_genewise$method)
res_genewise$method2 <- "NBCS (known)"
res_genewise$method2[res_genewise$method == "sct"] <- "NBCS (estimated)"
res_genewise$method2 <- ordered(res_genewise$method2,
levels=c("NBCS (known)","NBCS (estimated)"))
res_genewise <- res_genewise %>%
mutate(null = (j > 1000/20 | B1==0),
null2 = paste("Null= ", null),
overdisp2 = ifelse(overdisp==1, "Mild overdispersion", "Severe overdispersion"),
globalNull = ifelse(B1==0, "Global Null", "Not Global Null"),
eps2 = paste("\u03B5", "=", eps))
naiveCol <- "#E69F00"
sampSplitCol <- "#56B4E9"
InfCol <- "#009E73"
knownCol <- "#0072B2"
sctCol <- "#CC79A7"
consRes_Rand <- res_genewise %>% filter(j==1) %>%
group_by(j, B1, method2, overdisp2, eps) %>% summarize(meanRand = abs(mean(rand)))
consRes_Power <- res_genewise %>% filter(j < p/20) %>%
mutate(roundedSig = round(abs(coeff), 1)) %>%
group_by(roundedSig, method2, overdisp2, eps) %>% summarize(power = mean(pval < 0.05))
p22 <- ggplot(data=consRes_Rand %>% filter(j==1),
aes(x=B1, y=meanRand, col=as.factor(eps)))+
geom_point()+
geom_line()+
#geom_smooth(method="glm", method.args=list(family="binomial"), se=F)+
facet_grid(col=vars(overdisp2), row=vars(method2))+
ggtitle("Gene-by-gene")+theme_bw()+
ylab("Adjusted Rand Index")+
xlab(expression(beta))+
ggtitle("Ability to detect true clusters")
p33 <- ggplot(data=consRes_Power,
aes(x=roundedSig, y=power, col=as.factor(eps)))+
geom_point()+geom_line()+
facet_grid(vars(overdisp2), row=vars(method2))+xlim(0,3)+
ggtitle("Power")+theme_bw()+
ylab("Power")+xlab(expression(hat(beta)))
p22+p33+plot_layout(guides="collect") & guides(lty="none")
p22+p33+plot_layout(guides="collect") & guides(lty="none")
ggsave("~/Dropbox/nbCS_paper/v7/figures/detect_power.png", width=10, height=7)
setwd("~/countsplit")
setwd("~/countsplit")
setwd("~/countsplit.paper")
setwd("~/countsplit.tutorials")
pkgdown::build_site()
0.28*(1-0.28)/(sqrt(142))
0.28*(1-0.28)/(sqrt(52))
